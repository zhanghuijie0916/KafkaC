/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.sunny.avroDAO;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class StockAvroBean extends org.apache.avro.specific.SpecificRecordBase
        implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3550441256066490820L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"StockAvroBean\",\"namespace\":\"org.sunny.avroDAO\",\"fields\":[{\"name\":\"stockCode\",\"type\":\"string\"},{\"name\":\"stockName\",\"type\":\"string\"},{\"name\":\"tradeTime\",\"type\":\"long\"},{\"name\":\"preclosePrice\",\"type\":\"float\"},{\"name\":\"openPrice\",\"type\":\"float\"},{\"name\":\"currentPrice\",\"type\":\"float\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<StockAvroBean> ENCODER =
      new BinaryMessageEncoder<StockAvroBean>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<StockAvroBean> DECODER =
      new BinaryMessageDecoder<StockAvroBean>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<StockAvroBean> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<StockAvroBean> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<StockAvroBean>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this StockAvroBean to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a StockAvroBean from a ByteBuffer. */
  public static StockAvroBean fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence stockCode;
  @Deprecated public java.lang.CharSequence stockName;
  @Deprecated public long tradeTime;
  @Deprecated public float preclosePrice;
  @Deprecated public float openPrice;
  @Deprecated public float currentPrice;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public StockAvroBean() {}

  /**
   * All-args constructor.
   * @param stockCode The new value for stockCode
   * @param stockName The new value for stockName
   * @param tradeTime The new value for tradeTime
   * @param preclosePrice The new value for preclosePrice
   * @param openPrice The new value for openPrice
   * @param currentPrice The new value for currentPrice
   */
  public StockAvroBean(java.lang.CharSequence stockCode, java.lang.CharSequence stockName, java.lang.Long tradeTime, java.lang.Float preclosePrice, java.lang.Float openPrice, java.lang.Float currentPrice) {
    this.stockCode = stockCode;
    this.stockName = stockName;
    this.tradeTime = tradeTime;
    this.preclosePrice = preclosePrice;
    this.openPrice = openPrice;
    this.currentPrice = currentPrice;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return stockCode;
    case 1: return stockName;
    case 2: return tradeTime;
    case 3: return preclosePrice;
    case 4: return openPrice;
    case 5: return currentPrice;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: stockCode = (java.lang.CharSequence)value$; break;
    case 1: stockName = (java.lang.CharSequence)value$; break;
    case 2: tradeTime = (java.lang.Long)value$; break;
    case 3: preclosePrice = (java.lang.Float)value$; break;
    case 4: openPrice = (java.lang.Float)value$; break;
    case 5: currentPrice = (java.lang.Float)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'stockCode' field.
   * @return The value of the 'stockCode' field.
   */
  public java.lang.CharSequence getStockCode() {
    return stockCode;
  }

  /**
   * Sets the value of the 'stockCode' field.
   * @param value the value to set.
   */
  public void setStockCode(java.lang.CharSequence value) {
    this.stockCode = value;
  }

  /**
   * Gets the value of the 'stockName' field.
   * @return The value of the 'stockName' field.
   */
  public java.lang.CharSequence getStockName() {
    return stockName;
  }

  /**
   * Sets the value of the 'stockName' field.
   * @param value the value to set.
   */
  public void setStockName(java.lang.CharSequence value) {
    this.stockName = value;
  }

  /**
   * Gets the value of the 'tradeTime' field.
   * @return The value of the 'tradeTime' field.
   */
  public java.lang.Long getTradeTime() {
    return tradeTime;
  }

  /**
   * Sets the value of the 'tradeTime' field.
   * @param value the value to set.
   */
  public void setTradeTime(java.lang.Long value) {
    this.tradeTime = value;
  }

  /**
   * Gets the value of the 'preclosePrice' field.
   * @return The value of the 'preclosePrice' field.
   */
  public java.lang.Float getPreclosePrice() {
    return preclosePrice;
  }

  /**
   * Sets the value of the 'preclosePrice' field.
   * @param value the value to set.
   */
  public void setPreclosePrice(java.lang.Float value) {
    this.preclosePrice = value;
  }

  /**
   * Gets the value of the 'openPrice' field.
   * @return The value of the 'openPrice' field.
   */
  public java.lang.Float getOpenPrice() {
    return openPrice;
  }

  /**
   * Sets the value of the 'openPrice' field.
   * @param value the value to set.
   */
  public void setOpenPrice(java.lang.Float value) {
    this.openPrice = value;
  }

  /**
   * Gets the value of the 'currentPrice' field.
   * @return The value of the 'currentPrice' field.
   */
  public java.lang.Float getCurrentPrice() {
    return currentPrice;
  }

  /**
   * Sets the value of the 'currentPrice' field.
   * @param value the value to set.
   */
  public void setCurrentPrice(java.lang.Float value) {
    this.currentPrice = value;
  }

  /**
   * Creates a new StockAvroBean RecordBuilder.
   * @return A new StockAvroBean RecordBuilder
   */
  public static org.sunny.avroDAO.StockAvroBean.Builder newBuilder() {
    return new org.sunny.avroDAO.StockAvroBean.Builder();
  }

  /**
   * Creates a new StockAvroBean RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new StockAvroBean RecordBuilder
   */
  public static org.sunny.avroDAO.StockAvroBean.Builder newBuilder(org.sunny.avroDAO.StockAvroBean.Builder other) {
    return new org.sunny.avroDAO.StockAvroBean.Builder(other);
  }

  /**
   * Creates a new StockAvroBean RecordBuilder by copying an existing StockAvroBean instance.
   * @param other The existing instance to copy.
   * @return A new StockAvroBean RecordBuilder
   */
  public static org.sunny.avroDAO.StockAvroBean.Builder newBuilder(org.sunny.avroDAO.StockAvroBean other) {
    return new org.sunny.avroDAO.StockAvroBean.Builder(other);
  }

  /**
   * RecordBuilder for StockAvroBean instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<StockAvroBean>
    implements org.apache.avro.data.RecordBuilder<StockAvroBean> {

    private java.lang.CharSequence stockCode;
    private java.lang.CharSequence stockName;
    private long tradeTime;
    private float preclosePrice;
    private float openPrice;
    private float currentPrice;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.sunny.avroDAO.StockAvroBean.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.stockCode)) {
        this.stockCode = data().deepCopy(fields()[0].schema(), other.stockCode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.stockName)) {
        this.stockName = data().deepCopy(fields()[1].schema(), other.stockName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.tradeTime)) {
        this.tradeTime = data().deepCopy(fields()[2].schema(), other.tradeTime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.preclosePrice)) {
        this.preclosePrice = data().deepCopy(fields()[3].schema(), other.preclosePrice);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.openPrice)) {
        this.openPrice = data().deepCopy(fields()[4].schema(), other.openPrice);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.currentPrice)) {
        this.currentPrice = data().deepCopy(fields()[5].schema(), other.currentPrice);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing StockAvroBean instance
     * @param other The existing instance to copy.
     */
    private Builder(org.sunny.avroDAO.StockAvroBean other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.stockCode)) {
        this.stockCode = data().deepCopy(fields()[0].schema(), other.stockCode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.stockName)) {
        this.stockName = data().deepCopy(fields()[1].schema(), other.stockName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.tradeTime)) {
        this.tradeTime = data().deepCopy(fields()[2].schema(), other.tradeTime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.preclosePrice)) {
        this.preclosePrice = data().deepCopy(fields()[3].schema(), other.preclosePrice);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.openPrice)) {
        this.openPrice = data().deepCopy(fields()[4].schema(), other.openPrice);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.currentPrice)) {
        this.currentPrice = data().deepCopy(fields()[5].schema(), other.currentPrice);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'stockCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getStockCode() {
      return stockCode;
    }

    /**
      * Sets the value of the 'stockCode' field.
      * @param value The value of 'stockCode'.
      * @return This builder.
      */
    public org.sunny.avroDAO.StockAvroBean.Builder setStockCode(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.stockCode = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'stockCode' field has been set.
      * @return True if the 'stockCode' field has been set, false otherwise.
      */
    public boolean hasStockCode() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'stockCode' field.
      * @return This builder.
      */
    public org.sunny.avroDAO.StockAvroBean.Builder clearStockCode() {
      stockCode = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'stockName' field.
      * @return The value.
      */
    public java.lang.CharSequence getStockName() {
      return stockName;
    }

    /**
      * Sets the value of the 'stockName' field.
      * @param value The value of 'stockName'.
      * @return This builder.
      */
    public org.sunny.avroDAO.StockAvroBean.Builder setStockName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.stockName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'stockName' field has been set.
      * @return True if the 'stockName' field has been set, false otherwise.
      */
    public boolean hasStockName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'stockName' field.
      * @return This builder.
      */
    public org.sunny.avroDAO.StockAvroBean.Builder clearStockName() {
      stockName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'tradeTime' field.
      * @return The value.
      */
    public java.lang.Long getTradeTime() {
      return tradeTime;
    }

    /**
      * Sets the value of the 'tradeTime' field.
      * @param value The value of 'tradeTime'.
      * @return This builder.
      */
    public org.sunny.avroDAO.StockAvroBean.Builder setTradeTime(long value) {
      validate(fields()[2], value);
      this.tradeTime = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'tradeTime' field has been set.
      * @return True if the 'tradeTime' field has been set, false otherwise.
      */
    public boolean hasTradeTime() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'tradeTime' field.
      * @return This builder.
      */
    public org.sunny.avroDAO.StockAvroBean.Builder clearTradeTime() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'preclosePrice' field.
      * @return The value.
      */
    public java.lang.Float getPreclosePrice() {
      return preclosePrice;
    }

    /**
      * Sets the value of the 'preclosePrice' field.
      * @param value The value of 'preclosePrice'.
      * @return This builder.
      */
    public org.sunny.avroDAO.StockAvroBean.Builder setPreclosePrice(float value) {
      validate(fields()[3], value);
      this.preclosePrice = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'preclosePrice' field has been set.
      * @return True if the 'preclosePrice' field has been set, false otherwise.
      */
    public boolean hasPreclosePrice() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'preclosePrice' field.
      * @return This builder.
      */
    public org.sunny.avroDAO.StockAvroBean.Builder clearPreclosePrice() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'openPrice' field.
      * @return The value.
      */
    public java.lang.Float getOpenPrice() {
      return openPrice;
    }

    /**
      * Sets the value of the 'openPrice' field.
      * @param value The value of 'openPrice'.
      * @return This builder.
      */
    public org.sunny.avroDAO.StockAvroBean.Builder setOpenPrice(float value) {
      validate(fields()[4], value);
      this.openPrice = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'openPrice' field has been set.
      * @return True if the 'openPrice' field has been set, false otherwise.
      */
    public boolean hasOpenPrice() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'openPrice' field.
      * @return This builder.
      */
    public org.sunny.avroDAO.StockAvroBean.Builder clearOpenPrice() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'currentPrice' field.
      * @return The value.
      */
    public java.lang.Float getCurrentPrice() {
      return currentPrice;
    }

    /**
      * Sets the value of the 'currentPrice' field.
      * @param value The value of 'currentPrice'.
      * @return This builder.
      */
    public org.sunny.avroDAO.StockAvroBean.Builder setCurrentPrice(float value) {
      validate(fields()[5], value);
      this.currentPrice = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'currentPrice' field has been set.
      * @return True if the 'currentPrice' field has been set, false otherwise.
      */
    public boolean hasCurrentPrice() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'currentPrice' field.
      * @return This builder.
      */
    public org.sunny.avroDAO.StockAvroBean.Builder clearCurrentPrice() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public StockAvroBean build() {
      try {
        StockAvroBean record = new StockAvroBean();
        record.stockCode = fieldSetFlags()[0] ? this.stockCode : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.stockName = fieldSetFlags()[1] ? this.stockName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.tradeTime = fieldSetFlags()[2] ? this.tradeTime : (java.lang.Long) defaultValue(fields()[2]);
        record.preclosePrice = fieldSetFlags()[3] ? this.preclosePrice : (java.lang.Float) defaultValue(fields()[3]);
        record.openPrice = fieldSetFlags()[4] ? this.openPrice : (java.lang.Float) defaultValue(fields()[4]);
        record.currentPrice = fieldSetFlags()[5] ? this.currentPrice : (java.lang.Float) defaultValue(fields()[5]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<StockAvroBean>
    WRITER$ = (org.apache.avro.io.DatumWriter<StockAvroBean>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<StockAvroBean>
    READER$ = (org.apache.avro.io.DatumReader<StockAvroBean>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
